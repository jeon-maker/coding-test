# 1이 될 때 까지
# 1.N에서 1 을 뺀다 .    2.N을 K로 나눈다.
#예를 들어 N이 17 K가 4 라고 가정, 1번의 과정을 한번 거치면 16이 되고, 이후에 2번의
#과정을 두번 수행하면 1이 됨. 전체 과정을 실행한 횟수는 3이다. 이는 N을 1로 만드는
#최소 횟수이다. N과 K가 주어질 때 N이 1이 될 때 까지 1번 혹은 2번의 과정을 수행해야
#하는 최소횟수를 구하는 프로그램을 작성.

#입력조건 첫째줄에 N(2<=N<=100000) 과 K(2<=K<=100000)가 공백ㅇ로 구분되며
#자연수로 주어진다 이때 N>K
#출력조건 첫째 줄에 N이 1이 될 때 까지 1번 혹은 2 번의 과정을 수행해야 하는 횟수의
#최솟값을 출력한다
#입력예시 25 5  출력예시 2

# 내 답안
n, k = map(int,input().split())
count = 0

while True:
    if(n==1):
        print(count)
        break
    elif (n%k == 0 ):
        n = n/k 
        count += 1
    elif (n%k != 0):
        n -= 1
        count += 1

#모범 답안은 n이k이상일 때와 n<k 일때를 나눴다. 이것은 연산 시간 단축을 위함인듯 하다.
#나의 풀이도 정답이 나오지만 연산시간 단축을 위해서는 조금 더 세분화 할 필요가 있을듯 하다.